// Code generated by mockery v2.46.3. DO NOT EDIT.

package mockport

import (
	context "context"

	model "github.com/isutare412/crawlert/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockHTTPCrawler is an autogenerated mock type for the HTTPCrawler type
type MockHTTPCrawler struct {
	mock.Mock
}

type MockHTTPCrawler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPCrawler) EXPECT() *MockHTTPCrawler_Expecter {
	return &MockHTTPCrawler_Expecter{mock: &_m.Mock}
}

// Crawl provides a mock function with given fields: _a0, _a1
func (_m *MockHTTPCrawler) Crawl(_a0 context.Context, _a1 model.CrawlRequest) (model.CrawlResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Crawl")
	}

	var r0 model.CrawlResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CrawlRequest) (model.CrawlResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CrawlRequest) model.CrawlResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.CrawlResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CrawlRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHTTPCrawler_Crawl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Crawl'
type MockHTTPCrawler_Crawl_Call struct {
	*mock.Call
}

// Crawl is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.CrawlRequest
func (_e *MockHTTPCrawler_Expecter) Crawl(_a0 interface{}, _a1 interface{}) *MockHTTPCrawler_Crawl_Call {
	return &MockHTTPCrawler_Crawl_Call{Call: _e.mock.On("Crawl", _a0, _a1)}
}

func (_c *MockHTTPCrawler_Crawl_Call) Run(run func(_a0 context.Context, _a1 model.CrawlRequest)) *MockHTTPCrawler_Crawl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CrawlRequest))
	})
	return _c
}

func (_c *MockHTTPCrawler_Crawl_Call) Return(_a0 model.CrawlResponse, _a1 error) *MockHTTPCrawler_Crawl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPCrawler_Crawl_Call) RunAndReturn(run func(context.Context, model.CrawlRequest) (model.CrawlResponse, error)) *MockHTTPCrawler_Crawl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPCrawler creates a new instance of MockHTTPCrawler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPCrawler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPCrawler {
	mock := &MockHTTPCrawler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
