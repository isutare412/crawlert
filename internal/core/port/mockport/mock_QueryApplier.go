// Code generated by mockery v2.46.3. DO NOT EDIT.

package mockport

import (
	model "github.com/isutare412/crawlert/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryApplier is an autogenerated mock type for the QueryApplier type
type MockQueryApplier struct {
	mock.Mock
}

type MockQueryApplier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryApplier) EXPECT() *MockQueryApplier_Expecter {
	return &MockQueryApplier_Expecter{mock: &_m.Mock}
}

// ApplyQuery provides a mock function with given fields: jsonBytes
func (_m *MockQueryApplier) ApplyQuery(jsonBytes []byte) (model.QueryResult, error) {
	ret := _m.Called(jsonBytes)

	if len(ret) == 0 {
		panic("no return value specified for ApplyQuery")
	}

	var r0 model.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (model.QueryResult, error)); ok {
		return rf(jsonBytes)
	}
	if rf, ok := ret.Get(0).(func([]byte) model.QueryResult); ok {
		r0 = rf(jsonBytes)
	} else {
		r0 = ret.Get(0).(model.QueryResult)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(jsonBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryApplier_ApplyQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyQuery'
type MockQueryApplier_ApplyQuery_Call struct {
	*mock.Call
}

// ApplyQuery is a helper method to define mock.On call
//   - jsonBytes []byte
func (_e *MockQueryApplier_Expecter) ApplyQuery(jsonBytes interface{}) *MockQueryApplier_ApplyQuery_Call {
	return &MockQueryApplier_ApplyQuery_Call{Call: _e.mock.On("ApplyQuery", jsonBytes)}
}

func (_c *MockQueryApplier_ApplyQuery_Call) Run(run func(jsonBytes []byte)) *MockQueryApplier_ApplyQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockQueryApplier_ApplyQuery_Call) Return(_a0 model.QueryResult, _a1 error) *MockQueryApplier_ApplyQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryApplier_ApplyQuery_Call) RunAndReturn(run func([]byte) (model.QueryResult, error)) *MockQueryApplier_ApplyQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryApplier creates a new instance of MockQueryApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryApplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryApplier {
	mock := &MockQueryApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
